// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Crowdpooling {
    address payable public owner;
    uint public minDeposit;
    mapping(address => bool) public whitelist;
    mapping(address => uint) public balances;

    event Deposit(address indexed user, uint amount);
    event Whitelist(address indexed user, bool status);
    event Withdraw(address indexed owner, uint amount);

    constructor() {
        owner = payable(msg.sender);
        minDeposit = 10;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    function deposit() external payable {
        require(whitelist[msg.sender], "User not whitelisted");
        require(msg.value >= minDeposit, "Deposit amount must be greater than or equal to minimum deposit");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    function whitelistAddresses(address[] memory _users, bool _status) external onlyOwner {
    for (uint i = 0; i < _users.length; i++) {
        whitelist[_users[i]] = _status;
        emit Whitelist(_users[i], _status);
    }
}


    function withdraw(uint _amount) external onlyOwner {
        require(_amount <= address(this).balance, "Insufficient balance in contract");
        owner.transfer(_amount);
        emit Withdraw(owner, _amount);
    }
}
